package io.gamioo.poker;

/**
 * some description
 *
 * @author Allen Jiang
 * @since 1.0.0
 */
public class MaskDecode {
    public static void main(String[] args) {
        byte[] ENCODED = { 0x24, (byte) 0xCC, 0x41, 0x0E, (byte) 0x83, 0x20, 0x10, 0x40, (byte) 0xD1, (byte) 0xBB, (byte) 0xCC, (byte) 0xDA, 0x05, 0x30, 0x30, 0x40, (byte) 0xAF, (byte) 0xD2, (byte) 0xE9, 0x42, 0x1D, (byte) 0xC6, (byte) 0x90, 0x56, 0x49, 0x5A, 0x77, (byte) 0xA6, 0x77, (byte) 0x97, (byte) 0xE8, (byte) 0xF6, (byte) 0xE5, (byte) 0xE7, 0x7B, (byte) 0xF7, (byte) 0x84, 0x4F, 0x5B, (byte) 0xEA, 0x06, 0x03, 0x1C, 0x0C, 0x7B, 0x7B, (byte) 0x97, (byte) 0x8D, (byte) 0xE1, (byte) 0xC1, 0x20, 0x61, (byte) 0x94, 0x1C, 0x5D, 0x11, (byte) 0xEB, (byte) 0x89, 0x26, (byte) 0x83, (byte) 0x8A, 0x3A, 0x07, 0x21, (byte) 0xD5, (byte) 0x92, 0x44, 0x54, (byte) 0x88, 0x61, 0x60, (byte) 0xF8, (byte) 0xB6, (byte) 0xB6, 0x56, (byte) 0xB9, 0x7A, (byte) 0xC2, 0x48, 0x68, 0x2F, (byte) 0xDD, (byte) 0xEB, 0x5A, (byte) 0xBA, 0x59, (byte) 0xC2, 0x14, 0x6D, 0x46, (byte) 0xEB, (byte) 0xC8, 0x61, (byte) 0xE7, 0x5F, 0x5D, (byte) 0xEE, 0x75, (byte) 0xE9, 0x2B, (byte) 0xF5, 0x63, (byte) 0x9E, (byte) 0xA2, 0x27, 0x0C, 0x29, (byte) 0xA1, (byte) 0xAA, (byte) 0x8B, (byte) 0xFD, 0x2C, 0x33, 0x1A, (byte) 0xE3, 0x25, 0x30, (byte) 0xFC, (byte) 0xE1, 0x75, 0x02 };

        byte[] maskingKey={(byte) 0xF5, 0x76, (byte) 0x9E,0x46};

        int intMask = ((maskingKey[0] & 0xFF) << 24)
                | ((maskingKey[1] & 0xFF) << 16)
                | ((maskingKey[2] & 0xFF) << 8)
                | (maskingKey[3] & 0xFF);
        intMask = Integer.reverseBytes(intMask);
        byte[] DECODED = new byte[ENCODED.length];
        for (int i = 0; i < ENCODED.length; i++) {
            DECODED[i] = (byte) (ENCODED[i] ^ intMask^ maskingKey[i % 4]);

        }

//        for (; i < end; i++) {
//            frame.setByte(i, frame.getByte(i) ^ maskingKey[i % 4]);
//        }
//
//        for (int i = 0; i < ENCODED.length; i++) {
//            DECODED[i] = (byte) (ENCODED[i] ^ maskingKey[i % 4]);
//        }
      //  String result=new String(ENCODED);
       String result=new String(DECODED);
        //
        System.out.println("");
        System.out.println(result);
    }
}
