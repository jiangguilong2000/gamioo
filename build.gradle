def releaseTime;
def times;
ext {
    Properties properties = new Properties()
    String fileName = "version.properties"
    File propertyFile = new File(rootDir.getAbsoluteFile(), fileName)
    properties.load(propertyFile.newDataInputStream())
    String lastReleaseTime = properties["date"];
    times = Integer.parseInt(properties["release"]);
    releaseTime = new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+08:00"));
    if (lastReleaseTime != releaseTime) {
        properties["date"] = releaseTime;
        times = 1;
    } else {
        times++;
    }
    properties["release"] = String.valueOf(times);
    properties.store(propertyFile.newDataOutputStream(), "version info");
}
buildscript {
    repositories {
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
    }
    dependencies {
        classpath("me.champeau.jmh:jmh-gradle-plugin:0.6.8")
    }
}

subprojects {

    apply plugin: 'java-library';
    apply plugin: 'maven-publish';
    apply plugin: 'signing';
    apply plugin: 'jacoco';
    apply plugin: "me.champeau.jmh";

    group = 'io.gamioo';
    version = '0.2.14';
//	version = '0.0.1-SNAPSHOT';
    ext {
        releaseRoot = '../../dist'
    }

    sourceCompatibility = 11;
    targetCompatibility = 11;
    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << '-XDignore.symbol.file'
        options.fork = true
        options.forkOptions.executable = 'javac'
    }

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8';

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }


    tasks.withType(Test) {
        systemProperty "project.name", project.name;
    }


/**
 * 定义资源集
 * main源码包
 * test单测包
 * jmh基准测试包
 */
    sourceSets {
        main
        test
        jmh
    }

    /**创建java和resource目录*/
    task createDirs {
        //     println project.name + ":createDirs"
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    }

    jar {
        enabled = true
        archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}";
        manifest.attributes provider: 'Allen Jiang';
        manifest.attributes["Created-By"] = "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})";
        manifest.attributes["Implementation-Title"] = project.name;
        manifest.attributes["Implementation-Version"] = 'git rev-parse --abbrev-ref HEAD'.execute([], project.rootDir).text.trim() + "-" + 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim() + "-" + 'git rev-list HEAD --count'.execute([], project.rootDir).text.trim() + "-S" + releaseTime + "R" + times;
    }


    javadoc {
        options {
            encoding "UTF-8";
            charSet 'UTF-8';
            author true;
            version true;
            header = project.name;
            links "http://docs.oracle.com/javase/8/docs/api/";
        }
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources';
        from sourceSets.main.allJava;
    }


    task javadocJar(type: Jar) {
        from javadoc;
        archiveClassifier = 'javadoc';
    }


    //   task generatePomFileForMavenCustomPublication {
    //       destination = file("$buildDir/poms/pom.xml");
    //   }

    //  build.dependsOn(generatePomFileForMavenCustomPublication);

    artifacts {
        archives jar;
        archives sourcesJar;
        archives javadocJar;
    }


    publishing {
        repositories
                {
                    maven {
                        if (project.version.endsWith('-SNAPSHOT')) {
                            //快照版本的nexus仓库地址
                            name 'snapshots';
                            url 'https://oss.sonatype.org/content/repositories/snapshots/';
                        } else {
                            name 'releases';
                            url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/';

                        }
                        credentials {
                            username = System.getenv("NEXUS_USERNAME");
                            password = System.getenv("NEXUS_PASSWORD");
                        }
                    }
                }

        publications {
            mavenJava(MavenPublication)
                    {
                        groupId project.group;
                        artifactId project.name;
                        version project.version;

                        //若是war包，就写components.web,若是jar包，就写components.java
                        from components.java;
                        artifact sourcesJar;
                        artifact javadocJar;
                        suppressAllPomMetadataWarnings();//屏蔽所有编译时的WARNING
                        pom {
                            name = project.name;
                            description = 'This is a game server framework.';
                            url = 'https://gamioo.io';
                            packaging = 'jar';

                            scm {
                                connection = 'scm:git@github.com:jiangguilong2000/gamioo.git';
                                developerConnection = 'scm:git@github.com:jiangguilong2000/gamioo.git';
                                url = 'https://github.com/jiangguilong2000/gamioo/';
                            }

                            licenses {
                                license {
                                    name = 'Apache-2.0 License';
                                    url = 'https://github.com/jiangguilong2000/gamioo/blob/master/LICENSE';
                                    distribution = 'repo';
                                }
                            }

                            developers {
                                developer {
                                    id = 'jgl2000';
                                    name = '阿龙';
                                    email = '41157121@qq.com';
                                    url = 'https://blog.gamioo.io';
                                }
                            }
                        }


                        //		       	pom.withXml {
                        //				            asNode().appendNode('description','A demonstration of maven POM customization');
                        //				  }

                    }


        }

    }
    ext."signing.keyId" = System.getenv('SIGNING_KEYID')
    ext."signing.password" = System.getenv('SIGNING_PASSWORD')
    ext."signing.secretKeyRingFile" = System.getenv('SIGNING_SECRETKEYRINGFILE')

    signing {
        //sign configurations.archives;
        sign publishing.publications.mavenJava;
    }


    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.3'
        testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.4.0'
        testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.4.0'



        // 保证jmh目录下java代码能顺利import其他main目录下等代码
        jmhImplementation project
        jmhImplementation 'org.openjdk.jmh:jmh-core:1.36'
        jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.36'
        //  compileOnly group: 'org.apache.skywalking', name: 'apm-agent-core', version: '8.11.0'
        implementation group: 'org.jetbrains', name: 'annotations', version: '23.0.0'
    }

    jmh {

        // zip64 = false;
        jvmArgs = ['-Dfile.encoding=UTF-8'];
       humanOutputFile = project.file("${project.buildDir}/reports/jmh/human.txt");

//
//        //  humanOutputFile.encoding = utf - 8;
//        // human-readable output file
       resultsFile = project.file("${project.buildDir}/reports/jmh/results.json") // results file
        resultFormat="JSON";

    }

    test {
        useJUnitPlatform()
        maxParallelForks(1)
        ignoreFailures(false)
        failFast(true)

        afterSuite { desc, result ->
            if (!desc.parent) {
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
        reports.html.enabled = false
        reports.junitXml.enabled = false
    }

    task coverage(type: JacocoReport) {
        executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
        sourceSets sourceSets.main, sourceSets.jmh
    }

    coverage.dependsOn {
        project.test
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            html.enabled false
        }
    }

    check.dependsOn jacocoTestReport


}


allprojects {


//    task printSigning {
//        println(project.findProperty('signing.secretKeyRingFile'))
//    }
//
//    task currentDir {
//        println file('.')
//    }
    repositories {
        //腾讯云的国内镜像
        maven { url 'https://mirrors.cloud.tencent.com/nexus/repository/maven-public' }
        maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots' }
    }

}



